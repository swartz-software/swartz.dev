{"version":3,"sources":["assets/profile.png","Theme.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LightTheme","mode","colors","primaryLight","primary","primaryDark","complementLight","complement","complementDark","analogLight","analog","analogDark","highlight","disabled","warning","background","backgroundAlt","textPrimaryLight","textPrimary","textComplementLight","textComplement","textAnalogLight","textAnalog","textHighlight","textDisabled","textWarning","textBackground","textBackgroundAlt","DarkTheme","ThemeContext","React","createContext","Construction","Provider","Consumer","useState","periods","setPeriods","useLayoutEffect","setInterval","now","Math","floor","Date","repeat","className","themeMode","useEffect","document","body","style","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","App","getElementById","navigator","serviceWorker","ready","then","registration","a","unregister","catch","error"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,qC,8UCgC9BC,EAAoB,CAC/BC,KAAM,QACNC,OAAQ,CACNC,aAAc,UACdC,QAAS,UACTC,YAAa,UACbC,gBAAiB,UACjBC,WAAY,UACZC,eAAgB,UAChBC,YAAa,UACbC,OAAQ,UACRC,WAAY,UACZC,UAAW,UACXC,SAAU,UACVC,QAAS,UACTC,WAAY,UACZC,cAAe,UACfC,iBAAkB,UAClBC,YAAa,UACbC,oBAAqB,UACrBC,eAAgB,UAChBC,gBAAiB,UACjBC,WAAY,UACZC,cAAe,UACfC,aAAc,UACdC,YAAa,UACbC,eAAgB,UAChBC,kBAAmB,YAGVC,EAAmB,CAC9B3B,KAAM,OACNC,OAAQ,CACNC,aAAc,UACdC,QAAS,UACTC,YAAa,UACbC,gBAAiB,UACjBC,WAAY,UACZC,eAAgB,UAChBC,YAAa,UACbC,OAAQ,UACRC,WAAY,UACZC,UAAW,UACXC,SAAU,UACVC,QAAS,UACTC,WAAY,UACZC,cAAe,UACfC,iBAAkB,UAClBC,YAAa,UACbC,oBAAqB,UACrBC,eAAgB,UAChBC,gBAAiB,UACjBC,WAAY,UACZC,cAAe,UACfC,aAAc,UACdC,YAAa,UACbC,eAAgB,UAChBC,kBAAmB,YAIjBE,EAAeC,IAAMC,cAAqB/B,GCnF1CgC,GDqFuBH,EAAaI,SACbJ,EAAaK,S,iECtFrB,WAAO,IAAD,EACKC,mBAAS,aADd,mBAClBC,EADkB,KACTC,EADS,KAUzB,OAPAC,2BAAgB,WACdC,aAAY,WACV,IAAMC,EAAMC,KAAKC,MAAMC,KAAKH,MAAQ,KACpCH,EAAW,IAAIO,OAAQJ,EAAM,EAAK,GAAK,OAAOI,OAAO,EAAKJ,EAAM,MAC/D,OACF,IAGD,yBAAKK,UAAW,sBACd,sDAAkCT,MAKzB,aAAO,IAAD,EACeD,mBAA2B,SAD1C,mBACZW,EADY,UAUnB,OAPAC,qBAAU,WACRC,SAASC,KAAKC,MAAMC,gBACJ,UAAdL,EACI9C,EAAWE,OAAOa,WAClBa,EAAU1B,OAAOa,aACtB,CAAC+B,IAGF,kBAAC,EAAD,O,uBC1BgBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAACC,EAAD,MAASX,SAASY,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,KADH,uCACQ,WAAMC,GAAN,SAAAC,EAAA,sEACED,EAAaE,aADf,2CADR,uDAIGC,OAAM,SAAAC,S","file":"static/js/main.40fc006d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.2a3a0bbf.png\";","import React, { useContext } from 'react';\n\nexport type Theme = {\n  mode: 'light' | 'dark';\n  colors: {\n    primaryLight: string;\n    primary: string;\n    primaryDark: string;\n    complementLight: string;\n    complement: string;\n    complementDark: string;\n    analogLight: string;\n    analog: string;\n    analogDark: string;\n    highlight: string;\n    disabled: string;\n    warning: string;\n    background: string;\n    backgroundAlt: string;\n    textPrimaryLight: string;\n    textPrimary: string;\n    textComplementLight: string;\n    textComplement: string;\n    textAnalogLight: string;\n    textAnalog: string;\n    textHighlight: string;\n    textDisabled: string;\n    textWarning: string;\n    textBackground: string;\n    textBackgroundAlt: string;\n  };\n};\nexport const LightTheme: Theme = {\n  mode: 'light',\n  colors: {\n    primaryLight: '#C19594',\n    primary: '#A56363',\n    primaryDark: '#744344',\n    complementLight: '#A395C1',\n    complement: '#7A64A5',\n    complementDark: '#534373',\n    analogLight: '#96A4C1',\n    analog: '#6479A5',\n    analogDark: '#435474',\n    highlight: '#64A565',\n    disabled: '#808080',\n    warning: '#CC3F34',\n    background: '#E5E5E5',\n    backgroundAlt: '#B8B8B8',\n    textPrimaryLight: '#FFFFFF',\n    textPrimary: '#000000',\n    textComplementLight: '#FFFFFF',\n    textComplement: '#000000',\n    textAnalogLight: '#FFFFFF',\n    textAnalog: '#000000',\n    textHighlight: '#FFFFFF',\n    textDisabled: '#FFFFFF',\n    textWarning: '#FFFFFF',\n    textBackground: '#000000',\n    textBackgroundAlt: '#7A64A5',\n  },\n};\nexport const DarkTheme: Theme = {\n  mode: 'dark',\n  colors: {\n    primaryLight: '#A56363',\n    primary: '#744344',\n    primaryDark: '#473233',\n    complementLight: '#7A64A5',\n    complement: '#534373',\n    complementDark: '#393247',\n    analogLight: '#6479A5',\n    analog: '#435474',\n    analogDark: '#333A46',\n    highlight: '#447343',\n    disabled: '#666666',\n    warning: '#A43328',\n    background: '#4D4D4D',\n    backgroundAlt: '#2A2A2A',\n    textPrimaryLight: '#FFFFFF',\n    textPrimary: '#FFFFFF',\n    textComplementLight: '#FFFFFF',\n    textComplement: '#FFFFFF',\n    textAnalogLight: '#FFFFFF',\n    textAnalog: '#FFFFFF',\n    textHighlight: '#FFFFFF',\n    textDisabled: '#BBBBBB',\n    textWarning: '#FFFFFF',\n    textBackground: '#FFFFFF',\n    textBackgroundAlt: '#A395C1',\n  },\n};\n\nconst ThemeContext = React.createContext<Theme>(LightTheme);\n\nexport const ThemeProvider = ThemeContext.Provider;\nexport const ThemeConsumer = ThemeContext.Consumer;\n\nexport const useMode = () => {\n  const { mode } = useContext(ThemeContext);\n\n  return mode;\n};\n\nexport const useColor = () => {\n  const { colors } = useContext(ThemeContext);\n\n  return colors;\n};\n","import React, { useEffect, useLayoutEffect, useState } from 'react';\n\nimport { DarkTheme, LightTheme, ThemeProvider } from 'Theme';\nimport { Background, Footer } from 'components';\nimport { About, Contact, Home, Projects, Services } from 'pages';\n\nimport './underConstruction.scss';\n\nlet underConstruction = true;\n\nconst Construction = () => {\n  const [periods, setPeriods] = useState('.\\xA0\\xA0');\n\n  useLayoutEffect(() => {\n    setInterval(() => {\n      const now = Math.floor(Date.now() / 1000);\n      setPeriods('.'.repeat((now % 3) + 1) + '\\xA0'.repeat(2 - (now % 3)));\n    }, 1000);\n  }, []);\n\n  return (\n    <div className={'under-construction'}>\n      <h2>&nbsp;&nbsp;&nbsp;Coming soon{periods}</h2>\n    </div>\n  );\n};\n\nexport default () => {\n  const [themeMode, setThemeMode] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    document.body.style.backgroundColor =\n      themeMode === 'light'\n        ? LightTheme.colors.background\n        : DarkTheme.colors.background;\n  }, [themeMode]);\n\n  return underConstruction ? (\n    <Construction />\n  ) : (\n    <ThemeProvider value={themeMode === 'light' ? LightTheme : DarkTheme}>\n      <Background\n        headerLinks={[\n          { title: 'About Us', to: '#about' },\n          { title: 'Projects', to: '#projects' },\n          { title: 'Services', to: '#services' },\n        ]}\n        specialLink={{ title: 'Contact Us', to: '#contact' }}\n        title={'Swartz Software'}>\n        <Home />\n        <About />\n        <Projects />\n        <Services />\n        <Contact />\n      </Background>\n      <Footer />\n    </ThemeProvider>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) return;\n\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config?.onUpdate) config.onUpdate(registration);\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config?.onSuccess) config.onSuccess(registration);\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(async registration => {\n        await registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'normalize.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}